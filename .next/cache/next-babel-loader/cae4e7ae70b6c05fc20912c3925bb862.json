{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//import auth0 from '../../../lib/auth0';\nimport { firebase } from '../../../lib';\nconst firebaseDB = firebase.database();\nexport default (async (req, res) => {\n  try {\n    firebaseDB.ref('meditusData').once('value', snapshot => {\n      const meditusArr = [];\n      snapshot.forEach(childSnapshot => {\n        meditusArr.push(_objectSpread({\n          id: childSnapshot.key\n        }, childSnapshot.val()));\n      });\n      meditusArr.reverse();\n      res.status(200).json(meditusArr);\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(error.status || 500).json({\n      code: error.code,\n      error: error.message\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Usuario/Documents/GitHub/next-meditus/next-meditus/pages/api/meditus/index.js"],"names":["firebase","firebaseDB","database","req","res","ref","once","snapshot","meditusArr","forEach","childSnapshot","push","id","key","val","reverse","status","json","error","console","code","message"],"mappings":";;;;;;AAAA;AACA,SAASA,QAAT,QAAyB,cAAzB;AACA,MAAMC,UAAU,GAAGD,QAAQ,CAACE,QAAT,EAAnB;AACA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,MAAI;AACJH,IAAAA,UAAU,CAACI,GAAX,CAAe,aAAf,EAA8BC,IAA9B,CAAmC,OAAnC,EAA6CC,QAAD,IAAc;AAC1D,YAAMC,UAAU,GAAG,EAAnB;AACAD,MAAAA,QAAQ,CAACE,OAAT,CAAkBC,aAAD,IAAmB;AAChCF,QAAAA,UAAU,CAACG,IAAX;AACAC,UAAAA,EAAE,EAAEF,aAAa,CAACG;AADlB,WAEGH,aAAa,CAACI,GAAd,EAFH;AAIH,OALD;AAOAN,MAAAA,UAAU,CAACO,OAAX;AACIX,MAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,UAArB;AACH,KAXD;AAaC,GAdD,CAcE,OAAOU,KAAP,EAAc;AAChBC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAd,IAAAA,GAAG,CAACY,MAAJ,CAAWE,KAAK,CAACF,MAAN,IAAgB,GAA3B,EAAgCC,IAAhC,CAAqC;AACjCG,MAAAA,IAAI,EAAEF,KAAK,CAACE,IADqB;AAEjCF,MAAAA,KAAK,EAAEA,KAAK,CAACG;AAFoB,KAArC;AAIH;AAAC,CArBF","sourcesContent":["//import auth0 from '../../../lib/auth0';\nimport { firebase } from '../../../lib';\nconst firebaseDB = firebase.database();\nexport default async (req, res) => {\n    try {\n    firebaseDB.ref('meditusData').once('value', (snapshot) => {\n    const meditusArr = [];\n    snapshot.forEach((childSnapshot) => {\n        meditusArr.push({\n        id: childSnapshot.key,\n        ...childSnapshot.val()\n        })\n    })   \n    \n    meditusArr.reverse()\n        res.status(200).json(meditusArr);\n    })\n\n    } catch (error) {\n    console.error(error);\n    res.status(error.status || 500).json({\n        code: error.code,\n        error: error.message\n    });\n}};"]},"metadata":{},"sourceType":"module"}