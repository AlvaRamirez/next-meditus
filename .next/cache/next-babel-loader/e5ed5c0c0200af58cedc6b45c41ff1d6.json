{"ast":null,"code":"import auth0 from \"../../../lib/auth0\";\nimport { firebase } from \"../../../lib\";\nconst firebaseDB = firebase.database();\nexport default (async (req, res) => {\n  try {\n    const {\n      name,\n      company,\n      question\n    } = req.body; //Add auth0\n    //   const session = await auth0.getSession(req);\n    //   if (!session || !session.user) {\n    //     res.writeHead(302, {\n    //       Location: '/api/login'\n    //    });\n    //     res.end();\n    //     return; //   }\n    //  const { user } = session// const { name:username } = user\n    //Agrego document en la collection de questions (usando firebase con async/await)\n\n    const responseKey = await firebaseDB.ref('questions').push({\n      // username,\n      name,\n      // company,\n      //question,\n      highlight: false\n    }).getKey(); //Devuelvo el usuario recien creado\n\n    res.status(200).json({\n      \"status\": \"added\",\n      \"id\": responseKey,\n      username,\n      name,\n      company,\n      question\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(error.status || 500).json({\n      code: error.code,\n      error: error.message\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Usuario/Documents/GitHub/next-meditus/next-meditus/pages/api/questions/add.js"],"names":["auth0","firebase","firebaseDB","database","req","res","name","company","question","body","responseKey","ref","push","highlight","getKey","status","json","username","error","console","code","message"],"mappings":"AAAA,OAAOA,KAAP;AACA,SAASC,QAAT;AACA,MAAMC,UAAU,GAAGD,QAAQ,CAACE,QAAT,EAAnB;AAAwC,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvE,MAAI;AAAC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAA8BJ,GAAG,CAACK,IAAxC,CAAD,CACA;AACH;AACA;AACE;AACA;AACC;AACD;AACA;AACD;AACE;;AACA,UAAMC,WAAW,GAAG,MAAMR,UAAU,CAACS,GAAX,CAAe,WAAf,EAA4BC,IAA5B,CAAiC;AACxD;AACCN,MAAAA,IAFuD;AAGxD;AACC;AACAO,MAAAA,SAAS,EAAE;AAL4C,KAAjC,EAKFC,MALE,EAA1B,CAXA,CAiBA;;AACAT,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,gBAAS,OAAV;AAAmB,YAAMN,WAAzB;AAAsCO,MAAAA,QAAtC;AAAgDX,MAAAA,IAAhD;AAAsDC,MAAAA,OAAtD;AAA+DC,MAAAA;AAA/D,KAArB;AAAkG,GAlBtG,CAkBuG,OAAOU,KAAP,EAAc;AACjHC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAb,IAAAA,GAAG,CAACU,MAAJ,CAAWG,KAAK,CAACH,MAAN,IAAgB,GAA3B,EAAgCC,IAAhC,CAAqC;AACjCI,MAAAA,IAAI,EAAEF,KAAK,CAACE,IADqB;AAEjCF,MAAAA,KAAK,EAAEA,KAAK,CAACG;AAFoB,KAArC;AAIH;AAAC,CAzBkC","sourcesContent":["import auth0 from '../../../lib/auth0';\nimport { firebase } from '../../../lib';\nconst firebaseDB = firebase.database(); export default async (req, res) => {\n    try {const { name, company, question } = req.body;\n        //Add auth0\n     //   const session = await auth0.getSession(req);\n     //   if (!session || !session.user) {\n       //     res.writeHead(302, {\n       //       Location: '/api/login'\n        //    });\n       //     res.end();\n       //     return; //   }\n      //  const { user } = session// const { name:username } = user\n        //Agrego document en la collection de questions (usando firebase con async/await)\n        const responseKey = await firebaseDB.ref('questions').push({\n           // username,\n            name,\n           // company,\n            //question,\n            highlight: false }).getKey()\n        //Devuelvo el usuario recien creado\n        res.status(200).json({\"status\":\"added\", \"id\": responseKey, username, name, company, question }); } catch (error) {\n        console.error(error);\n        res.status(error.status || 500).json({\n            code: error.code,\n            error: error.message\n        });\n    }};"]},"metadata":{},"sourceType":"module"}